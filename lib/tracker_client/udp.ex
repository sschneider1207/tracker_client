defmodule TrackerClient.UDP do
  @moduledoc """
  Make announcements to trackers implementing the UDP tracking protocol.
  """
  @behaviour TrackerClient
  alias TrackerClient.UDP.{Statem, ConnectionSupervisor}

  @doc """
  See `TrackerClient`

  # Params

   * `info_hash` - urlencoded 20-byte SHA1 hash of the value of the info key from the Metainfo file.
   * `peer_id` - urlencoded 20-byte string used as a unique ID for the client, generated by the client at startup.
   * `port` - the port number that the client is listening on.
   * `uploaded` - total amount of bytes uploaded.
   * `downloaded` - total amount of bytes downloaded.
   * `left` - how many bytes are left.
   * `event` - `:started`, `:stopped`, `:completed`, or not included.
   * `numwant` - how many peers the client wants.
  """
  def announce(url, params) do
    with {:ok, pid} <- ConnectionSupervisor.start_child(url),
         {:ok, response} <- Statem.announce(pid, params)
    do
      {:ok, response}
    else
      {:error, :timeout} ->
        {:error, "timeout"}
      _ ->
        {:error, "udp error"}
    end
  end
end
